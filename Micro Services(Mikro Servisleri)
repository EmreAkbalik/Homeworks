Microservices yani mikroservis mimarisi farklı iş yeteneklerinin birbirinden bağımsız bir şekilde yapılandırıldığı mimari bir modeldir. Bu mimaride büyük sistemler her biri farklı bir işten sorumlu ve birbirinden bağımsız daha küçük servislere ayrılır. Sahne arkasında tüm bu servisler microservice (mikroservis) olarak adlandırılır.

Mikroservis kısaca bağımsız çalıştırılabilen, her birinin ayrı ve belirli bir sorumluluğu olan boyutu küçük servis demektir.

Bu yaklaşım SOA’dan (Service Oriented Architecture) ilham almıştır ve her ikisi de client-server yani istemci-sunucu mimarisinden gelmektedir. Mikroservis mimarisi, SOA’nın kendine özgü olacak şekilde bir uzantısı olarak görülebilir. Bu mimarilerin genel gelişim süreci şu şekildedir:
Yalnız mikroservis mimarisi servis odaklı mimarinin (SOA) tasarım ilkeleri birebir aynı değildir. SOA ile arasında farklılıklar bulunmaktadır. Service Oriented Architecture kurumsal seviyede bir mimari iken Microservice Architecture uygulama seviyesinde bir mimaridir. Önemli diğer farklılıkları ilgili başlık altında inceleyebilirsiniz.

İlk olarak Martin Fowler ve James Lewis tarafından tartışılan mikroservis mimarisi dağıtım kolaylığı, esneklik ve ölçekleme gibi çeşitli avantajlar sağlar.

Mikroservis mimarisinin en önemli özelliklerinden biri veri yapılarını paylaşmamasıdır. Her mikroservis kendi veri depolama alanına sahiptir (veritabanı şeması veya tablo gibi.) Yani her biri kendi veri modelinden ve verilerinden sorumludur. Diğer servisler sahibi olmadığı depolama alanına erişemezler.

Mikroservisler API adı verilen arayüzler aracılığıyla basit protokolleri kullanarak iletişim kurabilirler. Şu aşamada interface ile iletişim kurabildiklerini bilmek yeterlidir.

Genel olarak API Gateway adı verilen sisteme tek giriş noktası oluşturulur. Sisteme istek yapan kullanıcılar doğrudan mikroservislere istek yapmak yerine bunun üzerinden istek yapar. Burada yönlendirme, yetkilendirme gibi işlemler yapılır. Bu işlem için arka planda birden fazla mikroservise istek yapılabilir. Sonunda kullanıcıya tek bir sonuç dönülür.

Mikro hizmetlerin temel özellikleri şunlardır:

1. **Bağımsızlık:** Her mikro hizmet, kendine özgü bir işlevi yerine getirir ve bağımsız olarak geliştirilebilir, dağıtılabilir ve ölçeklendirilebilir.
Bu, farklı hizmetlerin farklı hızlarda ve teknolojilerle geliştirilebileceği anlamına gelir.

2. **Özgünlik:** Her mikro hizmet, belirli bir işlevi yerine getirir ve bu işlevi en iyi şekilde yerine getirmek için özgün bir tasarım ve teknoloji kullanabilir.
Bu, her hizmetin spesifik gereksinimlere ve kullanım senaryolarına uygun olmasını sağlar.

3. **Bağlantısızlık:** Mikro hizmetler, birbirleriyle asenkron veya senkron iletişim kurabilirler, ancak bağlantısız olarak çalışırlar.
Bu, bir hizmetin hata yapması veya çökmesi durumunda diğer hizmetlerin etkilenmemesini sağlar.

4. **API'lerle İletişim:** Mikro hizmetler, birbirleriyle API'ler (Application Programming Interfaces) aracılığıyla iletişim kurarlar.
Bu, hizmetlerin birbiriyle haberleşmesini ve veri paylaşmasını sağlar.

5. **Bağımsız Dağıtım:** Her hizmet, bağımsız olarak dağıtılabilir ve çalıştırılabilir.
Bu, yeni bir özellik eklemek veya bir hizmeti güncellemek için diğer hizmetlere dokunmaya gerek olmadığı anlamına gelir.

Mikro hizmetlerin avantajları şunlar olabilir:

- Hızlı Geliştirme: Her hizmet bağımsız olarak geliştirilebilir, bu da hızlı ve esnek geliştirme süreçleri sağlar.

- Ölçeklendirme: Hizmetler, ihtiyaçlar doğrultusunda bağımsız olarak ölçeklendirilebilir.

- Kolay Bakım: Tek bir hizmetin bakımı veya güncellenmesi diğerlerini etkilemez.

- Teknoloji Çeşitliliği: Farklı hizmetler farklı teknolojileri kullanabilir.

- Hata İzolasyonu: Bir hizmetin hatası diğerlerini etkilemez.

Ancak, mikro hizmetler yaklaşımı, daha fazla karmaşıklık ve yönetim gerektirebilir ve uygun bir altyapı ve otomasyonun gerekliliğini artırabilir.
Bu nedenle, uygulanırken dikkatli bir planlama ve yönetim gerektirir
